// Code generated by capnpc-go. DO NOT EDIT.

package v1

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	types "github.com/MTRNord/matrix_protobuf_fed/proto/federation/v1/types"
)

const MethodUUID_ = uint64(0xe55590d1a37e8043)

type StreamCallback capnp.Client

// StreamCallback_TypeID is the unique identifier for the type StreamCallback.
const StreamCallback_TypeID = 0x819a8ee6024db3d2

func (c StreamCallback) Write(ctx context.Context, params func(StreamCallback_write_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x819a8ee6024db3d2,
			MethodID:      0,
			InterfaceName: "internal/gomatrixserverlib/capnproto/federation/v1/federation.v1.capnp:StreamCallback",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StreamCallback_write_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c StreamCallback) Done(ctx context.Context, params func(StreamCallback_done_Params) error) (StreamCallback_done_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x819a8ee6024db3d2,
			MethodID:      1,
			InterfaceName: "internal/gomatrixserverlib/capnproto/federation/v1/federation.v1.capnp:StreamCallback",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StreamCallback_done_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StreamCallback_done_Results_Future{Future: ans.Future()}, release

}

func (c StreamCallback) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c StreamCallback) String() string {
	return "StreamCallback(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c StreamCallback) AddRef() StreamCallback {
	return StreamCallback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c StreamCallback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c StreamCallback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c StreamCallback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (StreamCallback) DecodeFromPtr(p capnp.Ptr) StreamCallback {
	return StreamCallback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c StreamCallback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c StreamCallback) IsSame(other StreamCallback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c StreamCallback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c StreamCallback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A StreamCallback_Server is a StreamCallback with a local implementation.
type StreamCallback_Server interface {
	Write(context.Context, StreamCallback_write) error

	Done(context.Context, StreamCallback_done) error
}

// StreamCallback_NewServer creates a new Server from an implementation of StreamCallback_Server.
func StreamCallback_NewServer(s StreamCallback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(StreamCallback_Methods(nil, s), s, c)
}

// StreamCallback_ServerToClient creates a new Client from an implementation of StreamCallback_Server.
// The caller is responsible for calling Release on the returned Client.
func StreamCallback_ServerToClient(s StreamCallback_Server) StreamCallback {
	return StreamCallback(capnp.NewClient(StreamCallback_NewServer(s)))
}

// StreamCallback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func StreamCallback_Methods(methods []server.Method, s StreamCallback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x819a8ee6024db3d2,
			MethodID:      0,
			InterfaceName: "internal/gomatrixserverlib/capnproto/federation/v1/federation.v1.capnp:StreamCallback",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, StreamCallback_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x819a8ee6024db3d2,
			MethodID:      1,
			InterfaceName: "internal/gomatrixserverlib/capnproto/federation/v1/federation.v1.capnp:StreamCallback",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, StreamCallback_done{call})
		},
	})

	return methods
}

// StreamCallback_write holds the state for a server call to StreamCallback.write.
// See server.Call for documentation.
type StreamCallback_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StreamCallback_write) Args() StreamCallback_write_Params {
	return StreamCallback_write_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StreamCallback_write) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// StreamCallback_done holds the state for a server call to StreamCallback.done.
// See server.Call for documentation.
type StreamCallback_done struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StreamCallback_done) Args() StreamCallback_done_Params {
	return StreamCallback_done_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StreamCallback_done) AllocResults() (StreamCallback_done_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StreamCallback_done_Results(r), err
}

// StreamCallback_List is a list of StreamCallback.
type StreamCallback_List = capnp.CapList[StreamCallback]

// NewStreamCallback creates a new list of StreamCallback.
func NewStreamCallback_List(s *capnp.Segment, sz int32) (StreamCallback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[StreamCallback](l), err
}

type StreamCallback_write_Params capnp.Struct

// StreamCallback_write_Params_TypeID is the unique identifier for the type StreamCallback_write_Params.
const StreamCallback_write_Params_TypeID = 0xc99d5953442de820

func NewStreamCallback_write_Params(s *capnp.Segment) (StreamCallback_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StreamCallback_write_Params(st), err
}

func NewRootStreamCallback_write_Params(s *capnp.Segment) (StreamCallback_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StreamCallback_write_Params(st), err
}

func ReadRootStreamCallback_write_Params(msg *capnp.Message) (StreamCallback_write_Params, error) {
	root, err := msg.Root()
	return StreamCallback_write_Params(root.Struct()), err
}

func (s StreamCallback_write_Params) String() string {
	str, _ := text.Marshal(0xc99d5953442de820, capnp.Struct(s))
	return str
}

func (s StreamCallback_write_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StreamCallback_write_Params) DecodeFromPtr(p capnp.Ptr) StreamCallback_write_Params {
	return StreamCallback_write_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StreamCallback_write_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StreamCallback_write_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StreamCallback_write_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StreamCallback_write_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StreamCallback_write_Params) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s StreamCallback_write_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StreamCallback_write_Params) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// StreamCallback_write_Params_List is a list of StreamCallback_write_Params.
type StreamCallback_write_Params_List = capnp.StructList[StreamCallback_write_Params]

// NewStreamCallback_write_Params creates a new list of StreamCallback_write_Params.
func NewStreamCallback_write_Params_List(s *capnp.Segment, sz int32) (StreamCallback_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StreamCallback_write_Params](l), err
}

// StreamCallback_write_Params_Future is a wrapper for a StreamCallback_write_Params promised by a client call.
type StreamCallback_write_Params_Future struct{ *capnp.Future }

func (f StreamCallback_write_Params_Future) Struct() (StreamCallback_write_Params, error) {
	p, err := f.Future.Ptr()
	return StreamCallback_write_Params(p.Struct()), err
}
func (p StreamCallback_write_Params_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type StreamCallback_done_Params capnp.Struct

// StreamCallback_done_Params_TypeID is the unique identifier for the type StreamCallback_done_Params.
const StreamCallback_done_Params_TypeID = 0xfffa8c2e7b1978ac

func NewStreamCallback_done_Params(s *capnp.Segment) (StreamCallback_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StreamCallback_done_Params(st), err
}

func NewRootStreamCallback_done_Params(s *capnp.Segment) (StreamCallback_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StreamCallback_done_Params(st), err
}

func ReadRootStreamCallback_done_Params(msg *capnp.Message) (StreamCallback_done_Params, error) {
	root, err := msg.Root()
	return StreamCallback_done_Params(root.Struct()), err
}

func (s StreamCallback_done_Params) String() string {
	str, _ := text.Marshal(0xfffa8c2e7b1978ac, capnp.Struct(s))
	return str
}

func (s StreamCallback_done_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StreamCallback_done_Params) DecodeFromPtr(p capnp.Ptr) StreamCallback_done_Params {
	return StreamCallback_done_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StreamCallback_done_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StreamCallback_done_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StreamCallback_done_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StreamCallback_done_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StreamCallback_done_Params_List is a list of StreamCallback_done_Params.
type StreamCallback_done_Params_List = capnp.StructList[StreamCallback_done_Params]

// NewStreamCallback_done_Params creates a new list of StreamCallback_done_Params.
func NewStreamCallback_done_Params_List(s *capnp.Segment, sz int32) (StreamCallback_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StreamCallback_done_Params](l), err
}

// StreamCallback_done_Params_Future is a wrapper for a StreamCallback_done_Params promised by a client call.
type StreamCallback_done_Params_Future struct{ *capnp.Future }

func (f StreamCallback_done_Params_Future) Struct() (StreamCallback_done_Params, error) {
	p, err := f.Future.Ptr()
	return StreamCallback_done_Params(p.Struct()), err
}

type StreamCallback_done_Results capnp.Struct

// StreamCallback_done_Results_TypeID is the unique identifier for the type StreamCallback_done_Results.
const StreamCallback_done_Results_TypeID = 0xd37bc71261c39851

func NewStreamCallback_done_Results(s *capnp.Segment) (StreamCallback_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StreamCallback_done_Results(st), err
}

func NewRootStreamCallback_done_Results(s *capnp.Segment) (StreamCallback_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StreamCallback_done_Results(st), err
}

func ReadRootStreamCallback_done_Results(msg *capnp.Message) (StreamCallback_done_Results, error) {
	root, err := msg.Root()
	return StreamCallback_done_Results(root.Struct()), err
}

func (s StreamCallback_done_Results) String() string {
	str, _ := text.Marshal(0xd37bc71261c39851, capnp.Struct(s))
	return str
}

func (s StreamCallback_done_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StreamCallback_done_Results) DecodeFromPtr(p capnp.Ptr) StreamCallback_done_Results {
	return StreamCallback_done_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StreamCallback_done_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StreamCallback_done_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StreamCallback_done_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StreamCallback_done_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StreamCallback_done_Results_List is a list of StreamCallback_done_Results.
type StreamCallback_done_Results_List = capnp.StructList[StreamCallback_done_Results]

// NewStreamCallback_done_Results creates a new list of StreamCallback_done_Results.
func NewStreamCallback_done_Results_List(s *capnp.Segment, sz int32) (StreamCallback_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StreamCallback_done_Results](l), err
}

// StreamCallback_done_Results_Future is a wrapper for a StreamCallback_done_Results promised by a client call.
type StreamCallback_done_Results_Future struct{ *capnp.Future }

func (f StreamCallback_done_Results_Future) Struct() (StreamCallback_done_Results, error) {
	p, err := f.Future.Ptr()
	return StreamCallback_done_Results(p.Struct()), err
}

type MatrixFederation capnp.Client

// MatrixFederation_TypeID is the unique identifier for the type MatrixFederation.
const MatrixFederation_TypeID = 0xf730448b3b47991e

func (c MatrixFederation) GetVersion(ctx context.Context, params func(MatrixFederation_getVersion_Params) error) (MatrixFederation_getVersion_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      0,
			InterfaceName: "internal/gomatrixserverlib/capnproto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "getVersion",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MatrixFederation_getVersion_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MatrixFederation_getVersion_Results_Future{Future: ans.Future()}, release

}

func (c MatrixFederation) GetKeys(ctx context.Context, params func(MatrixFederation_getKeys_Params) error) (MatrixFederation_getKeys_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      1,
			InterfaceName: "internal/gomatrixserverlib/capnproto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "getKeys",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MatrixFederation_getKeys_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MatrixFederation_getKeys_Results_Future{Future: ans.Future()}, release

}

func (c MatrixFederation) SendTransactions(ctx context.Context, params func(MatrixFederation_sendTransactions_Params) error) (MatrixFederation_sendTransactions_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      2,
			InterfaceName: "internal/gomatrixserverlib/capnproto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "sendTransactions",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MatrixFederation_sendTransactions_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MatrixFederation_sendTransactions_Results_Future{Future: ans.Future()}, release

}

func (c MatrixFederation) Backfill(ctx context.Context, params func(MatrixFederation_backfill_Params) error) (MatrixFederation_backfill_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      3,
			InterfaceName: "internal/gomatrixserverlib/capnproto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "backfill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MatrixFederation_backfill_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MatrixFederation_backfill_Results_Future{Future: ans.Future()}, release

}

func (c MatrixFederation) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c MatrixFederation) String() string {
	return "MatrixFederation(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c MatrixFederation) AddRef() MatrixFederation {
	return MatrixFederation(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c MatrixFederation) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c MatrixFederation) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c MatrixFederation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (MatrixFederation) DecodeFromPtr(p capnp.Ptr) MatrixFederation {
	return MatrixFederation(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c MatrixFederation) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c MatrixFederation) IsSame(other MatrixFederation) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c MatrixFederation) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c MatrixFederation) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A MatrixFederation_Server is a MatrixFederation with a local implementation.
type MatrixFederation_Server interface {
	GetVersion(context.Context, MatrixFederation_getVersion) error

	GetKeys(context.Context, MatrixFederation_getKeys) error

	SendTransactions(context.Context, MatrixFederation_sendTransactions) error

	Backfill(context.Context, MatrixFederation_backfill) error
}

// MatrixFederation_NewServer creates a new Server from an implementation of MatrixFederation_Server.
func MatrixFederation_NewServer(s MatrixFederation_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(MatrixFederation_Methods(nil, s), s, c)
}

// MatrixFederation_ServerToClient creates a new Client from an implementation of MatrixFederation_Server.
// The caller is responsible for calling Release on the returned Client.
func MatrixFederation_ServerToClient(s MatrixFederation_Server) MatrixFederation {
	return MatrixFederation(capnp.NewClient(MatrixFederation_NewServer(s)))
}

// MatrixFederation_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func MatrixFederation_Methods(methods []server.Method, s MatrixFederation_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      0,
			InterfaceName: "internal/gomatrixserverlib/capnproto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "getVersion",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetVersion(ctx, MatrixFederation_getVersion{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      1,
			InterfaceName: "internal/gomatrixserverlib/capnproto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "getKeys",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetKeys(ctx, MatrixFederation_getKeys{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      2,
			InterfaceName: "internal/gomatrixserverlib/capnproto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "sendTransactions",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendTransactions(ctx, MatrixFederation_sendTransactions{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf730448b3b47991e,
			MethodID:      3,
			InterfaceName: "internal/gomatrixserverlib/capnproto/federation/v1/federation.v1.capnp:MatrixFederation",
			MethodName:    "backfill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Backfill(ctx, MatrixFederation_backfill{call})
		},
	})

	return methods
}

// MatrixFederation_getVersion holds the state for a server call to MatrixFederation.getVersion.
// See server.Call for documentation.
type MatrixFederation_getVersion struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MatrixFederation_getVersion) Args() MatrixFederation_getVersion_Params {
	return MatrixFederation_getVersion_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MatrixFederation_getVersion) AllocResults() (MatrixFederation_getVersion_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MatrixFederation_getVersion_Results(r), err
}

// MatrixFederation_getKeys holds the state for a server call to MatrixFederation.getKeys.
// See server.Call for documentation.
type MatrixFederation_getKeys struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MatrixFederation_getKeys) Args() MatrixFederation_getKeys_Params {
	return MatrixFederation_getKeys_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MatrixFederation_getKeys) AllocResults() (MatrixFederation_getKeys_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_getKeys_Results(r), err
}

// MatrixFederation_sendTransactions holds the state for a server call to MatrixFederation.sendTransactions.
// See server.Call for documentation.
type MatrixFederation_sendTransactions struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MatrixFederation_sendTransactions) Args() MatrixFederation_sendTransactions_Params {
	return MatrixFederation_sendTransactions_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MatrixFederation_sendTransactions) AllocResults() (MatrixFederation_sendTransactions_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MatrixFederation_sendTransactions_Results(r), err
}

// MatrixFederation_backfill holds the state for a server call to MatrixFederation.backfill.
// See server.Call for documentation.
type MatrixFederation_backfill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MatrixFederation_backfill) Args() MatrixFederation_backfill_Params {
	return MatrixFederation_backfill_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MatrixFederation_backfill) AllocResults() (MatrixFederation_backfill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_backfill_Results(r), err
}

// MatrixFederation_List is a list of MatrixFederation.
type MatrixFederation_List = capnp.CapList[MatrixFederation]

// NewMatrixFederation creates a new list of MatrixFederation.
func NewMatrixFederation_List(s *capnp.Segment, sz int32) (MatrixFederation_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[MatrixFederation](l), err
}

type MatrixFederation_getVersion_Params capnp.Struct

// MatrixFederation_getVersion_Params_TypeID is the unique identifier for the type MatrixFederation_getVersion_Params.
const MatrixFederation_getVersion_Params_TypeID = 0xa6475494fcf1c9df

func NewMatrixFederation_getVersion_Params(s *capnp.Segment) (MatrixFederation_getVersion_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_getVersion_Params(st), err
}

func NewRootMatrixFederation_getVersion_Params(s *capnp.Segment) (MatrixFederation_getVersion_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_getVersion_Params(st), err
}

func ReadRootMatrixFederation_getVersion_Params(msg *capnp.Message) (MatrixFederation_getVersion_Params, error) {
	root, err := msg.Root()
	return MatrixFederation_getVersion_Params(root.Struct()), err
}

func (s MatrixFederation_getVersion_Params) String() string {
	str, _ := text.Marshal(0xa6475494fcf1c9df, capnp.Struct(s))
	return str
}

func (s MatrixFederation_getVersion_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_getVersion_Params) DecodeFromPtr(p capnp.Ptr) MatrixFederation_getVersion_Params {
	return MatrixFederation_getVersion_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_getVersion_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_getVersion_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_getVersion_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_getVersion_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// MatrixFederation_getVersion_Params_List is a list of MatrixFederation_getVersion_Params.
type MatrixFederation_getVersion_Params_List = capnp.StructList[MatrixFederation_getVersion_Params]

// NewMatrixFederation_getVersion_Params creates a new list of MatrixFederation_getVersion_Params.
func NewMatrixFederation_getVersion_Params_List(s *capnp.Segment, sz int32) (MatrixFederation_getVersion_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[MatrixFederation_getVersion_Params](l), err
}

// MatrixFederation_getVersion_Params_Future is a wrapper for a MatrixFederation_getVersion_Params promised by a client call.
type MatrixFederation_getVersion_Params_Future struct{ *capnp.Future }

func (f MatrixFederation_getVersion_Params_Future) Struct() (MatrixFederation_getVersion_Params, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_getVersion_Params(p.Struct()), err
}

type MatrixFederation_getVersion_Results capnp.Struct

// MatrixFederation_getVersion_Results_TypeID is the unique identifier for the type MatrixFederation_getVersion_Results.
const MatrixFederation_getVersion_Results_TypeID = 0xf35f5ffe08536d82

func NewMatrixFederation_getVersion_Results(s *capnp.Segment) (MatrixFederation_getVersion_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MatrixFederation_getVersion_Results(st), err
}

func NewRootMatrixFederation_getVersion_Results(s *capnp.Segment) (MatrixFederation_getVersion_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MatrixFederation_getVersion_Results(st), err
}

func ReadRootMatrixFederation_getVersion_Results(msg *capnp.Message) (MatrixFederation_getVersion_Results, error) {
	root, err := msg.Root()
	return MatrixFederation_getVersion_Results(root.Struct()), err
}

func (s MatrixFederation_getVersion_Results) String() string {
	str, _ := text.Marshal(0xf35f5ffe08536d82, capnp.Struct(s))
	return str
}

func (s MatrixFederation_getVersion_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_getVersion_Results) DecodeFromPtr(p capnp.Ptr) MatrixFederation_getVersion_Results {
	return MatrixFederation_getVersion_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_getVersion_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_getVersion_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_getVersion_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_getVersion_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MatrixFederation_getVersion_Results) ServerVersion() (types.ServerVersion, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return types.ServerVersion(p.Struct()), err
}

func (s MatrixFederation_getVersion_Results) HasServerVersion() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MatrixFederation_getVersion_Results) SetServerVersion(v types.ServerVersion) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewServerVersion sets the serverVersion field to a newly
// allocated types.ServerVersion struct, preferring placement in s's segment.
func (s MatrixFederation_getVersion_Results) NewServerVersion() (types.ServerVersion, error) {
	ss, err := types.NewServerVersion(capnp.Struct(s).Segment())
	if err != nil {
		return types.ServerVersion{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MatrixFederation_getVersion_Results_List is a list of MatrixFederation_getVersion_Results.
type MatrixFederation_getVersion_Results_List = capnp.StructList[MatrixFederation_getVersion_Results]

// NewMatrixFederation_getVersion_Results creates a new list of MatrixFederation_getVersion_Results.
func NewMatrixFederation_getVersion_Results_List(s *capnp.Segment, sz int32) (MatrixFederation_getVersion_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MatrixFederation_getVersion_Results](l), err
}

// MatrixFederation_getVersion_Results_Future is a wrapper for a MatrixFederation_getVersion_Results promised by a client call.
type MatrixFederation_getVersion_Results_Future struct{ *capnp.Future }

func (f MatrixFederation_getVersion_Results_Future) Struct() (MatrixFederation_getVersion_Results, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_getVersion_Results(p.Struct()), err
}
func (p MatrixFederation_getVersion_Results_Future) ServerVersion() types.ServerVersion_Future {
	return types.ServerVersion_Future{Future: p.Future.Field(0, nil)}
}

type MatrixFederation_getKeys_Params capnp.Struct

// MatrixFederation_getKeys_Params_TypeID is the unique identifier for the type MatrixFederation_getKeys_Params.
const MatrixFederation_getKeys_Params_TypeID = 0x979c195cba352fad

func NewMatrixFederation_getKeys_Params(s *capnp.Segment) (MatrixFederation_getKeys_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MatrixFederation_getKeys_Params(st), err
}

func NewRootMatrixFederation_getKeys_Params(s *capnp.Segment) (MatrixFederation_getKeys_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MatrixFederation_getKeys_Params(st), err
}

func ReadRootMatrixFederation_getKeys_Params(msg *capnp.Message) (MatrixFederation_getKeys_Params, error) {
	root, err := msg.Root()
	return MatrixFederation_getKeys_Params(root.Struct()), err
}

func (s MatrixFederation_getKeys_Params) String() string {
	str, _ := text.Marshal(0x979c195cba352fad, capnp.Struct(s))
	return str
}

func (s MatrixFederation_getKeys_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_getKeys_Params) DecodeFromPtr(p capnp.Ptr) MatrixFederation_getKeys_Params {
	return MatrixFederation_getKeys_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_getKeys_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_getKeys_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_getKeys_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_getKeys_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MatrixFederation_getKeys_Params) Server_keys() (types.Map, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return types.Map(p.Struct()), err
}

func (s MatrixFederation_getKeys_Params) HasServer_keys() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MatrixFederation_getKeys_Params) SetServer_keys(v types.Map) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewServer_keys sets the server_keys field to a newly
// allocated types.Map struct, preferring placement in s's segment.
func (s MatrixFederation_getKeys_Params) NewServer_keys() (types.Map, error) {
	ss, err := types.NewMap(capnp.Struct(s).Segment())
	if err != nil {
		return types.Map{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MatrixFederation_getKeys_Params) Callback() StreamCallback {
	p, _ := capnp.Struct(s).Ptr(1)
	return StreamCallback(p.Interface().Client())
}

func (s MatrixFederation_getKeys_Params) HasCallback() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MatrixFederation_getKeys_Params) SetCallback(v StreamCallback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// MatrixFederation_getKeys_Params_List is a list of MatrixFederation_getKeys_Params.
type MatrixFederation_getKeys_Params_List = capnp.StructList[MatrixFederation_getKeys_Params]

// NewMatrixFederation_getKeys_Params creates a new list of MatrixFederation_getKeys_Params.
func NewMatrixFederation_getKeys_Params_List(s *capnp.Segment, sz int32) (MatrixFederation_getKeys_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[MatrixFederation_getKeys_Params](l), err
}

// MatrixFederation_getKeys_Params_Future is a wrapper for a MatrixFederation_getKeys_Params promised by a client call.
type MatrixFederation_getKeys_Params_Future struct{ *capnp.Future }

func (f MatrixFederation_getKeys_Params_Future) Struct() (MatrixFederation_getKeys_Params, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_getKeys_Params(p.Struct()), err
}
func (p MatrixFederation_getKeys_Params_Future) Server_keys() types.Map_Future {
	return types.Map_Future{Future: p.Future.Field(0, nil)}
}
func (p MatrixFederation_getKeys_Params_Future) Callback() StreamCallback {
	return StreamCallback(p.Future.Field(1, nil).Client())
}

type MatrixFederation_getKeys_Results capnp.Struct

// MatrixFederation_getKeys_Results_TypeID is the unique identifier for the type MatrixFederation_getKeys_Results.
const MatrixFederation_getKeys_Results_TypeID = 0x902da9b8b1031221

func NewMatrixFederation_getKeys_Results(s *capnp.Segment) (MatrixFederation_getKeys_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_getKeys_Results(st), err
}

func NewRootMatrixFederation_getKeys_Results(s *capnp.Segment) (MatrixFederation_getKeys_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_getKeys_Results(st), err
}

func ReadRootMatrixFederation_getKeys_Results(msg *capnp.Message) (MatrixFederation_getKeys_Results, error) {
	root, err := msg.Root()
	return MatrixFederation_getKeys_Results(root.Struct()), err
}

func (s MatrixFederation_getKeys_Results) String() string {
	str, _ := text.Marshal(0x902da9b8b1031221, capnp.Struct(s))
	return str
}

func (s MatrixFederation_getKeys_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_getKeys_Results) DecodeFromPtr(p capnp.Ptr) MatrixFederation_getKeys_Results {
	return MatrixFederation_getKeys_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_getKeys_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_getKeys_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_getKeys_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_getKeys_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// MatrixFederation_getKeys_Results_List is a list of MatrixFederation_getKeys_Results.
type MatrixFederation_getKeys_Results_List = capnp.StructList[MatrixFederation_getKeys_Results]

// NewMatrixFederation_getKeys_Results creates a new list of MatrixFederation_getKeys_Results.
func NewMatrixFederation_getKeys_Results_List(s *capnp.Segment, sz int32) (MatrixFederation_getKeys_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[MatrixFederation_getKeys_Results](l), err
}

// MatrixFederation_getKeys_Results_Future is a wrapper for a MatrixFederation_getKeys_Results promised by a client call.
type MatrixFederation_getKeys_Results_Future struct{ *capnp.Future }

func (f MatrixFederation_getKeys_Results_Future) Struct() (MatrixFederation_getKeys_Results, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_getKeys_Results(p.Struct()), err
}

type MatrixFederation_sendTransactions_Params capnp.Struct

// MatrixFederation_sendTransactions_Params_TypeID is the unique identifier for the type MatrixFederation_sendTransactions_Params.
const MatrixFederation_sendTransactions_Params_TypeID = 0xff6b4b94e55e5d73

func NewMatrixFederation_sendTransactions_Params(s *capnp.Segment) (MatrixFederation_sendTransactions_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_sendTransactions_Params(st), err
}

func NewRootMatrixFederation_sendTransactions_Params(s *capnp.Segment) (MatrixFederation_sendTransactions_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_sendTransactions_Params(st), err
}

func ReadRootMatrixFederation_sendTransactions_Params(msg *capnp.Message) (MatrixFederation_sendTransactions_Params, error) {
	root, err := msg.Root()
	return MatrixFederation_sendTransactions_Params(root.Struct()), err
}

func (s MatrixFederation_sendTransactions_Params) String() string {
	str, _ := text.Marshal(0xff6b4b94e55e5d73, capnp.Struct(s))
	return str
}

func (s MatrixFederation_sendTransactions_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_sendTransactions_Params) DecodeFromPtr(p capnp.Ptr) MatrixFederation_sendTransactions_Params {
	return MatrixFederation_sendTransactions_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_sendTransactions_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_sendTransactions_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_sendTransactions_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_sendTransactions_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// MatrixFederation_sendTransactions_Params_List is a list of MatrixFederation_sendTransactions_Params.
type MatrixFederation_sendTransactions_Params_List = capnp.StructList[MatrixFederation_sendTransactions_Params]

// NewMatrixFederation_sendTransactions_Params creates a new list of MatrixFederation_sendTransactions_Params.
func NewMatrixFederation_sendTransactions_Params_List(s *capnp.Segment, sz int32) (MatrixFederation_sendTransactions_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[MatrixFederation_sendTransactions_Params](l), err
}

// MatrixFederation_sendTransactions_Params_Future is a wrapper for a MatrixFederation_sendTransactions_Params promised by a client call.
type MatrixFederation_sendTransactions_Params_Future struct{ *capnp.Future }

func (f MatrixFederation_sendTransactions_Params_Future) Struct() (MatrixFederation_sendTransactions_Params, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_sendTransactions_Params(p.Struct()), err
}

type MatrixFederation_sendTransactions_Results capnp.Struct

// MatrixFederation_sendTransactions_Results_TypeID is the unique identifier for the type MatrixFederation_sendTransactions_Results.
const MatrixFederation_sendTransactions_Results_TypeID = 0x9622325dc507c361

func NewMatrixFederation_sendTransactions_Results(s *capnp.Segment) (MatrixFederation_sendTransactions_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MatrixFederation_sendTransactions_Results(st), err
}

func NewRootMatrixFederation_sendTransactions_Results(s *capnp.Segment) (MatrixFederation_sendTransactions_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MatrixFederation_sendTransactions_Results(st), err
}

func ReadRootMatrixFederation_sendTransactions_Results(msg *capnp.Message) (MatrixFederation_sendTransactions_Results, error) {
	root, err := msg.Root()
	return MatrixFederation_sendTransactions_Results(root.Struct()), err
}

func (s MatrixFederation_sendTransactions_Results) String() string {
	str, _ := text.Marshal(0x9622325dc507c361, capnp.Struct(s))
	return str
}

func (s MatrixFederation_sendTransactions_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_sendTransactions_Results) DecodeFromPtr(p capnp.Ptr) MatrixFederation_sendTransactions_Results {
	return MatrixFederation_sendTransactions_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_sendTransactions_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_sendTransactions_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_sendTransactions_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_sendTransactions_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MatrixFederation_sendTransactions_Results) Callback() StreamCallback {
	p, _ := capnp.Struct(s).Ptr(0)
	return StreamCallback(p.Interface().Client())
}

func (s MatrixFederation_sendTransactions_Results) HasCallback() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MatrixFederation_sendTransactions_Results) SetCallback(v StreamCallback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// MatrixFederation_sendTransactions_Results_List is a list of MatrixFederation_sendTransactions_Results.
type MatrixFederation_sendTransactions_Results_List = capnp.StructList[MatrixFederation_sendTransactions_Results]

// NewMatrixFederation_sendTransactions_Results creates a new list of MatrixFederation_sendTransactions_Results.
func NewMatrixFederation_sendTransactions_Results_List(s *capnp.Segment, sz int32) (MatrixFederation_sendTransactions_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MatrixFederation_sendTransactions_Results](l), err
}

// MatrixFederation_sendTransactions_Results_Future is a wrapper for a MatrixFederation_sendTransactions_Results promised by a client call.
type MatrixFederation_sendTransactions_Results_Future struct{ *capnp.Future }

func (f MatrixFederation_sendTransactions_Results_Future) Struct() (MatrixFederation_sendTransactions_Results, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_sendTransactions_Results(p.Struct()), err
}
func (p MatrixFederation_sendTransactions_Results_Future) Callback() StreamCallback {
	return StreamCallback(p.Future.Field(0, nil).Client())
}

type MatrixFederation_backfill_Params capnp.Struct

// MatrixFederation_backfill_Params_TypeID is the unique identifier for the type MatrixFederation_backfill_Params.
const MatrixFederation_backfill_Params_TypeID = 0xc423d46c6c56b237

func NewMatrixFederation_backfill_Params(s *capnp.Segment) (MatrixFederation_backfill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return MatrixFederation_backfill_Params(st), err
}

func NewRootMatrixFederation_backfill_Params(s *capnp.Segment) (MatrixFederation_backfill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return MatrixFederation_backfill_Params(st), err
}

func ReadRootMatrixFederation_backfill_Params(msg *capnp.Message) (MatrixFederation_backfill_Params, error) {
	root, err := msg.Root()
	return MatrixFederation_backfill_Params(root.Struct()), err
}

func (s MatrixFederation_backfill_Params) String() string {
	str, _ := text.Marshal(0xc423d46c6c56b237, capnp.Struct(s))
	return str
}

func (s MatrixFederation_backfill_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_backfill_Params) DecodeFromPtr(p capnp.Ptr) MatrixFederation_backfill_Params {
	return MatrixFederation_backfill_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_backfill_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_backfill_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_backfill_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_backfill_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MatrixFederation_backfill_Params) Auth_data() (types.AuthData, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return types.AuthData(p.Struct()), err
}

func (s MatrixFederation_backfill_Params) HasAuth_data() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MatrixFederation_backfill_Params) SetAuth_data(v types.AuthData) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAuth_data sets the auth_data field to a newly
// allocated types.AuthData struct, preferring placement in s's segment.
func (s MatrixFederation_backfill_Params) NewAuth_data() (types.AuthData, error) {
	ss, err := types.NewAuthData(capnp.Struct(s).Segment())
	if err != nil {
		return types.AuthData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MatrixFederation_backfill_Params) RoomID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s MatrixFederation_backfill_Params) HasRoomID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MatrixFederation_backfill_Params) RoomIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s MatrixFederation_backfill_Params) SetRoomID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s MatrixFederation_backfill_Params) Limit() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s MatrixFederation_backfill_Params) SetLimit(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s MatrixFederation_backfill_Params) EventIDs() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s MatrixFederation_backfill_Params) HasEventIDs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s MatrixFederation_backfill_Params) SetEventIDs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewEventIDs sets the eventIDs field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MatrixFederation_backfill_Params) NewEventIDs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s MatrixFederation_backfill_Params) Callback() StreamCallback {
	p, _ := capnp.Struct(s).Ptr(3)
	return StreamCallback(p.Interface().Client())
}

func (s MatrixFederation_backfill_Params) HasCallback() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s MatrixFederation_backfill_Params) SetCallback(v StreamCallback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

// MatrixFederation_backfill_Params_List is a list of MatrixFederation_backfill_Params.
type MatrixFederation_backfill_Params_List = capnp.StructList[MatrixFederation_backfill_Params]

// NewMatrixFederation_backfill_Params creates a new list of MatrixFederation_backfill_Params.
func NewMatrixFederation_backfill_Params_List(s *capnp.Segment, sz int32) (MatrixFederation_backfill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[MatrixFederation_backfill_Params](l), err
}

// MatrixFederation_backfill_Params_Future is a wrapper for a MatrixFederation_backfill_Params promised by a client call.
type MatrixFederation_backfill_Params_Future struct{ *capnp.Future }

func (f MatrixFederation_backfill_Params_Future) Struct() (MatrixFederation_backfill_Params, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_backfill_Params(p.Struct()), err
}
func (p MatrixFederation_backfill_Params_Future) Auth_data() types.AuthData_Future {
	return types.AuthData_Future{Future: p.Future.Field(0, nil)}
}
func (p MatrixFederation_backfill_Params_Future) Callback() StreamCallback {
	return StreamCallback(p.Future.Field(3, nil).Client())
}

type MatrixFederation_backfill_Results capnp.Struct

// MatrixFederation_backfill_Results_TypeID is the unique identifier for the type MatrixFederation_backfill_Results.
const MatrixFederation_backfill_Results_TypeID = 0x8c1d77025e504f82

func NewMatrixFederation_backfill_Results(s *capnp.Segment) (MatrixFederation_backfill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_backfill_Results(st), err
}

func NewRootMatrixFederation_backfill_Results(s *capnp.Segment) (MatrixFederation_backfill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MatrixFederation_backfill_Results(st), err
}

func ReadRootMatrixFederation_backfill_Results(msg *capnp.Message) (MatrixFederation_backfill_Results, error) {
	root, err := msg.Root()
	return MatrixFederation_backfill_Results(root.Struct()), err
}

func (s MatrixFederation_backfill_Results) String() string {
	str, _ := text.Marshal(0x8c1d77025e504f82, capnp.Struct(s))
	return str
}

func (s MatrixFederation_backfill_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MatrixFederation_backfill_Results) DecodeFromPtr(p capnp.Ptr) MatrixFederation_backfill_Results {
	return MatrixFederation_backfill_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MatrixFederation_backfill_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MatrixFederation_backfill_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MatrixFederation_backfill_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MatrixFederation_backfill_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// MatrixFederation_backfill_Results_List is a list of MatrixFederation_backfill_Results.
type MatrixFederation_backfill_Results_List = capnp.StructList[MatrixFederation_backfill_Results]

// NewMatrixFederation_backfill_Results creates a new list of MatrixFederation_backfill_Results.
func NewMatrixFederation_backfill_Results_List(s *capnp.Segment, sz int32) (MatrixFederation_backfill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[MatrixFederation_backfill_Results](l), err
}

// MatrixFederation_backfill_Results_Future is a wrapper for a MatrixFederation_backfill_Results promised by a client call.
type MatrixFederation_backfill_Results_Future struct{ *capnp.Future }

func (f MatrixFederation_backfill_Results_Future) Struct() (MatrixFederation_backfill_Results, error) {
	p, err := f.Future.Ptr()
	return MatrixFederation_backfill_Results(p.Struct()), err
}

const schema_ee8fadeb6a9300eb = "x\xda\xbcV]l\x14U\x14>\xe7\xde\xa9\xb3\xdb\xee" +
	"\xb6{wK\xb4$\xb2\xa2\x18\xc1\xd8\x96\xb21\x0a<" +
	"\xd0B\xa5\x16B\xdcKiC\x09\xd0\x0c\xed\x00Kg" +
	"waf\xdaB\x10E\x84(X~*\x05,\xd1\x07" +
	"Q\xfc\xc3&\x02\x89\xf1\xa7Q\x10\x90\xf0\xa0\x09*\x89" +
	"\xf8\xa0\xf6\x01\x83\x01L\xd4\x07\x13\x05\xae\xb9\xb3;\xb3" +
	"\x8b\xd2\xa7ny\xd9d\xe7\x9cs\xbfs\xbe\xef\xdes" +
	"\xce\xd4\x0dJ\xadR\x13<\x10\x06\xc2\xbf/\xbaK|" +
	"s|\x01\xf9e\xd7\xc1\xe7\x805\xd0\x1bW\xf6\xae\xb9" +
	"2\xb8\xfb7\x80\x10\xc6j\xfc\xc7H\xa4\xd5\xaf\x02D" +
	"\x9a\xfd/D\x86\xfdjd\xd8_&\xb6<\x15_N" +
	"z\xee\xed\x05\xb6\x18\x01\x14\x15 v\xc1?\x8f\x82\"" +
	"&\x86\xe9\xd1\x8f\xde\xad\xdc\x93g\x19\xf6\xcf\x96\x16\xed" +
	"\x94zf\xd9\xb4\xfb\xf7g,E(M\xbf\xfawP" +
	"\xc0HE\xf1,@1X\xfd\xe8'K+^=\x90" +
	"u \xd2!Y<C:\xec+\xee\x01\x14?\x9d\xfb" +
	"\xfdz\xff\xa2\x86\xb7\xf2\xce\xfe\xb8d\xa1<\xfb\xb1c" +
	"-\x86\xf1\xdd\x03\xa7\x81/F\x19\xeb\xd8\xce\x94\xcc\xa6" +
	"\x80\xb1k%Q\x04\x14\xf7]\xae\xacoj}\xed\x1c" +
	"\xb0\x96\x0c|\x08c\x8d\xc1\xf1\xf2\xf4uA\x09\xcf_" +
	"9\xa5\x85\xcfn\xfc6\xe3\xa0H{\x9f\xb4+b\xce" +
	"\xe6g\xde8\xbf\xa7\xf9\x12\xf45\x14\x11\x8f\x1e\x8c\x0d" +
	"\x04_&\x91\x93A\x15\xa0i(H%\xc8\x96d\x93" +
	"\xeff[\xdb\x9f\xf95\x0e\x06\x97H\x90\x8b\x0e\xc8\x84" +
	"\x81\x86\x99/\xd5O\xfd\xeb\x16\xa21v#\xf8\x05\x89" +
	"<X*\xdd'\x96\xaa\x18\xe1e*\x80\xb0\x96-\xbf" +
	"\xd4?\xbfS\xe4\xd5;\xbdl\x8b\xcc\xe8\xfd\xf5\x15\x1b" +
	"\xabz\xff\x16y\xb9>Q\x16\xa6 `H$R\xb6" +
	"n\xa64\xc3_\xbd*\x9d\xd4l3\xb1\xde\xd2\xcdn" +
	"\xdd4\x12+\xaa\xdb\xb5\xb5\xa9\xb5f\xdaNW\xaf\xd4" +
	";tS\xb3\x13\xe9TuwM\xde\xbf\xaa\xee\x9a*" +
	"\xc7kF\x93m\xeaZr\x8efD\x8d\x15Z{g" +
	"\x1c\x91\xfbh\x11\x80\xc7$\xa6\x8e\x9e\xe8\x89\x1dl\x1b" +
	"`5\xd3\x00\xea\x1eA\x006]E\xf4\xb2C\x97R" +
	"V\xf90@\xddd\xac{\x1cY\xa3\x1a\xed1\x13\xb6" +
	"\xce0\xca\x15\x82\xb9\xab'\x85\xab\xc5\xb2\x8et\xea\xf6" +
	"\xb6\x11\x02\xe2\x88u\x0a2\x0c\xe3\"\xaf\xf4\xc0(K" +
	"_\xe0\xc4\xce\xcdY$\x01+\x13\x861i\xa1nu" +
	"\x19\xb6\x05\xe0a\x8d/4\xd6*\xdd\x9e\xafo\xb0<" +
	"(\x17\xa8\xd08\x96\x9e\xeaXdj)Kk\x97\xff" +
	"s\x80\xc0\x15\xaa\x00(\x92\xf3\xe0<\x00\x1e\xa0\xc8\x9f" +
	"$(\xda5\xc3\xb9\x0a\x00\x80,\xa7\x83T\xe1\x7f\xe2" +
	"H\xbd\xee\xe6\x0a\"b\x9c\"\x86D\xebW=\xa7\xe7" +
	"\xd6\x0em\x05@d\x80\x1e\x7f%c\xc5\xdf\xac\xb8f" +
	"jI\x8b\xfb\xbcb\xa6\xac\x00\xe0\x93)\xf2\xd3\x04\x19" +
	"b\xb9s\xabN\xca\x0aOP\xe4\xd7\x09\x8aL\x0am" +
	"\x9d\xa0\xea\x1b,\x0c\x89\xc8\xd9\xcf\x0f\xef\x9d\xd0\xf3\xde" +
	"-5\xe6}d\xf8\x10\xf7\xc9\x1a\xb9\x8f\xca\xdf\x10E" +
	"\x0c\x00\x19Ud]\xfcj\xc7\xfc\xd6/?\x95D\x85" +
	"`\x94\xac\xf7\xd7\xbc\xbd\x86\xf4\x0f\xf5\xfd\x97\xf5\xc0\x18" +
	"\xb0\xde\xa2\x9bV\"\x9d\x9a\xe4\xf0\x8e\xd6\x1dx\x8d\x19" +
	"\x85\x81\x97{\x12oZ\x08\xc0\x9f\xa6\xc8_\xcc\x93x" +
	"\xdb\x0c\x00\xbe\x99\"\xef%\x88\xa4\x1c\x09\x00\xdb>\x0d" +
	"\x80o\xa5\xc8\xf7\x10d\x94\x94#\x05`;\xe5]\xe8" +
	"\xa5\xc8\xdf!\xc8\x14Z\x8e\x0a\x00;,?\xbeI\x91" +
	"\xffLPh]\xf6\xea\xb6\x0e\xcd\x06\xd40$\xfa\x8e" +
	"~\xb6{\xca\xf3\x87.f\xa5\x9ae\xa6\xd3\xc9\xc6z" +
	"G\xc7\x00`\xd4H$\x136\xfa\x80\xa0\x0fP\xe8\xdd" +
	"z\xcan\xac\xb7\xa4\x8e\xa5\xe0\xe8#\x1dKG+\xb1" +
	"\xfe\xf5\x9a\x0f\"\xe3\xf6\xfdQ\xe8\x87\xe5\xf5\x7f'\xb5" +
	"*\xa7i;\x8c\xd3\xa4\x95\xdf!$\x91>\x8a\xbc\x9c" +
	"`\xb4[3\xbat\x0c\xe3-\xf9bx\xec\xb2\x92\xd3" +
	"\"\xd3\xb8\xa8m\x15l\xf4%u{u\xba\xa3\xb9\xb9" +
	"\x11\xeb\xe3\x88\xe8\x07rG\x1e\x8e[G>\xbbf\xb6" +
	"\xff\xde\xe3u\xa7\x16\x1d\xa2\x8e?\x86\xc4\x87?\x1e:" +
	"2\xf3b\xec\xb2\xdb+\xdc,\x8b\x0b\x9c%\xc4\x9d\x16" +
	"%\xa7\xbf\xbb\x84\xa1\xbb\xeb\xb0uKXW\x14\x90m" +
	"\x97\xb3\xdf]\xe2\xd0]\x04\xd9\xa6\xd9l\x934\xf7\xa9" +
	"H\xbc\x95\x06\xddm\x90m\xdb\xc1vJ\xf3\xeb*R" +
	"o\x8fCw\xc1d\xfb\xe6\xb1\x01i\x1eT\x85\xcb\x14" +
	"\xd0t\x8a+Hr{\x99|!u\x01D\xbf8_" +
	"\x1f\x8b^>>\xe1\x08\x00\xd6\xe2\xb3\xd9Q0\x92s" +
	"\xe9\x85\x1f\xf6\x8f;_\xb9\xd7q\x16\xee<Dw " +
	"\xcaAx\xdb\xc0\x7f\xb6.]5lt^u\xc2\xdc" +
	"f\x04#\xba\x8bk\x81\xdd7w\xee*=\xe0\xe0\xc4" +
	"1'S\xc5\x98\xcf\xf4l\x87,\xd0\x0eq\xbb\xc7\x97" +
	"\xed\xf6\xff\x06\x00\x00\xff\xff\xb7n\xed\xf1"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_ee8fadeb6a9300eb,
		Nodes: []uint64{
			0x819a8ee6024db3d2,
			0x8c1d77025e504f82,
			0x902da9b8b1031221,
			0x9622325dc507c361,
			0x979c195cba352fad,
			0xa6475494fcf1c9df,
			0xc423d46c6c56b237,
			0xc99d5953442de820,
			0xd37bc71261c39851,
			0xe55590d1a37e8043,
			0xf35f5ffe08536d82,
			0xf730448b3b47991e,
			0xff6b4b94e55e5d73,
			0xfffa8c2e7b1978ac,
		},
		Compressed: true,
	})
}
